// Code generated by go-bindata.
// sources:
// templates/files/configmap.yml
// templates/files/deployment.yml
// templates/files/job.yml
// templates/files/persistentvolumeclaim.yml
// templates/files/pod.yml
// templates/files/project.yml
// templates/files/service.yml
// DO NOT EDIT!

package templates

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesFilesConfigmapYml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x4a\x2c\xc8\x0c\x4b\x2d\x2a\xce\xcc\xcf\xb3\x52\x28\x33\xe4\xca\xce\xcc\x4b\xb1\x52\x70\xce\xcf\x4b\xcb\x4c\xf7\x4d\x2c\xe0\xca\x4d\x2d\x49\x4c\x49\x2c\x49\xb4\xe2\x52\x50\xc8\x4b\xcc\x4d\xb5\x52\x88\x4e\x06\x4b\xc6\x83\x78\xb1\x5c\x30\xb9\xec\xd4\x4a\x43\x2b\x85\xb2\xc4\x9c\xd2\x54\x43\x08\xd7\x08\xca\x35\x52\x50\xe0\x02\x04\x00\x00\xff\xff\x43\x9c\xd9\x6a\x65\x00\x00\x00")

func templatesFilesConfigmapYmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesFilesConfigmapYml,
		"templates/files/configmap.yml",
	)
}

func templatesFilesConfigmapYml() (*asset, error) {
	bytes, err := templatesFilesConfigmapYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/files/configmap.yml", size: 101, mode: os.FileMode(420), modTime: time.Unix(1485158628, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesFilesDeploymentYml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x9c\x94\xcf\x8e\x9b\x30\x10\xc6\xef\x3c\x85\x5f\xa0\xda\x4d\x7b\xe3\x16\x6d\xb6\x5b\xa9\x4b\x1a\x6d\xd4\x5c\x10\x8a\x26\x30\x09\xa3\xf8\x9f\xec\x01\x95\xb7\xaf\x0c\x24\x35\x90\xaa\x52\x7d\x32\xf3\xfd\x3c\xdf\x8c\xc7\x02\x2c\x1d\xd0\x79\x32\x3a\x15\xf8\x8b\x51\x87\xad\x7f\x6a\x57\x27\x64\x58\x25\x57\xd2\x55\x2a\x36\x68\xa5\xe9\x14\x6a\x4e\x14\x32\x54\xc0\x90\x26\x42\x68\x50\x98\x8a\xbc\xba\xab\xc7\x10\x29\x12\x6f\xb1\x0c\xba\x43\x2b\xa9\x04\x3f\x65\xc6\x68\xd1\x03\x2d\x05\xbf\x6f\xe4\xd9\xb8\xee\x9d\x14\x71\x2a\x56\xcf\x89\x10\x8c\xca\x4a\x60\x0c\x79\x84\x88\x5d\xc3\x92\x70\x42\xe9\x6f\x5f\x7f\xaf\x24\x68\x7d\x35\x03\x36\xf2\x50\x32\xb5\xb8\x41\xa8\x24\x69\xdc\x63\x69\x74\x15\x8a\x84\xca\x17\x23\x42\x0a\x2e\xb8\x6b\xa4\xdc\x63\xe9\x90\x23\xab\x4f\x37\x33\xdf\x2b\xb7\x03\xa5\xd1\x0c\xa4\xd1\x3d\x42\xef\x62\x54\x56\xe4\x33\x21\xfa\x48\x8c\x80\xbb\x44\x39\x87\xbc\xf9\xfa\xe3\x6d\x1f\x43\xa5\x51\x0a\x74\xb5\xe0\x5e\x7e\x64\xd9\x7a\xbb\x89\x51\x49\x2d\x6a\xf4\x7e\xe7\xcc\x09\xa7\x07\x6a\x66\xfb\x86\x3c\x0d\x0a\x61\x81\xeb\x54\x3c\xcd\xa3\xc6\x71\x2a\xf2\x1a\x41\x72\x7d\x0c\x5f\xc5\x84\x20\x4d\x4c\x20\x37\x28\xa1\xbb\xdf\xf1\xea\xf3\xf3\x04\x62\x52\x68\x1a\xbe\xeb\x5f\x62\x19\x75\x3b\x6f\x68\xbc\xd0\xd7\xed\xe1\xb8\x5d\x67\xaf\xc5\xac\xa6\x16\x64\x83\x5f\x9d\x51\xf3\x16\xfa\x01\x9d\xe9\x92\x81\xfd\x8e\xdd\x07\x9e\x97\x80\x88\xa6\x75\xa6\xcb\x62\x54\xb7\x75\xc5\xee\x0f\x74\xc5\xae\xf8\x8f\x12\x47\xfd\xb0\x7e\xff\x39\x01\x5a\x23\x1b\x85\x99\x69\x34\x2f\x66\xae\x42\x74\xd7\x8f\x22\xef\xf7\xc7\x30\x97\x79\xfa\xd1\x7d\x00\xe2\x16\x86\xd4\x8f\x5e\xe7\x92\x0d\xcb\x86\xbf\x82\x67\xd4\x7c\xe8\x4f\xbe\x48\xa0\xd9\xb5\x96\x21\xb4\x1d\x2f\x2d\xec\x67\x49\xfe\xe1\x50\x1b\x3f\xf4\x33\x49\x3a\x3c\xb6\x7c\xe8\xed\x77\x00\x00\x00\xff\xff\xe8\xcd\xd7\x50\x9e\x04\x00\x00")

func templatesFilesDeploymentYmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesFilesDeploymentYml,
		"templates/files/deployment.yml",
	)
}

func templatesFilesDeploymentYml() (*asset, error) {
	bytes, err := templatesFilesDeploymentYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/files/deployment.yml", size: 1182, mode: os.FileMode(420), modTime: time.Unix(1486617623, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesFilesJobYml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x9c\x52\x4d\x6f\xa3\x30\x10\xbd\xf3\x2b\xe6\x0f\xac\x56\x7b\xe5\x86\xb2\xd9\x95\xda\x42\xa3\x44\xe5\x12\xa1\x68\x42\x26\xe0\x06\xdb\xc8\x1e\x90\xf8\xf7\x95\xb1\x93\xf2\x51\xa9\x52\xe7\x34\x7a\xef\xf9\xcd\xbc\x01\x6c\x45\x4e\xc6\x0a\xad\x62\x38\x23\x97\xf5\xef\xfe\x4f\x74\x13\xea\x12\xc3\x93\x3e\x47\x92\x18\x2f\xc8\x18\x47\x00\x0a\x25\xc5\x70\x7c\xd7\xe7\x93\x6b\x8b\xc8\xb6\x54\x3a\x82\x49\xb6\x0d\x32\xb9\x1e\xe0\x8e\xba\x32\x64\x19\x0d\xef\x74\x23\xca\x21\x86\x8c\x7a\x32\x9e\x09\x02\x21\xb1\xa2\x5d\xd7\x34\x07\x2a\x0d\xb1\xbd\x3f\x04\xf8\x05\x47\x3b\x62\x45\x80\x4a\xad\x18\x85\x22\x33\x13\x85\xa5\x1e\x64\x58\x0d\x1e\x35\x4e\x98\x29\x46\x64\x2a\x41\x53\x4d\x3c\xbd\x6f\xb2\xff\x7f\x98\x40\xa5\x96\x12\xd5\x65\xa9\xda\xbc\xa6\x69\x92\xfd\x9d\xa0\xa4\xfa\xa5\x28\xac\xb8\xcd\xf2\x53\x96\xa4\xdb\x62\x46\x03\xf4\xd8\x74\xf4\xcf\x68\x19\x2f\x88\x31\xf2\x55\x54\x29\xb6\xcf\x34\xec\xe9\xba\x16\xc0\x24\xff\x55\x54\xab\xf0\xf7\xba\xd1\xf0\x29\xba\xd1\x50\xfc\x60\xc5\xc0\xe7\xc9\xcb\xdb\x4c\xd0\xeb\xa6\x93\x94\xea\x4e\xf1\xea\x8a\xd2\xa1\x3b\xe4\x3a\x86\xe3\xd8\x9f\x5a\xe4\x7a\x69\x1f\xa6\x7b\xc1\x34\x82\xb7\xfe\xea\x7b\xaf\xb5\xae\x5a\xf7\x27\x5b\x26\xc5\xf9\xf8\x72\xd3\xa0\x58\x9c\xb5\x74\x50\x16\x8e\xe6\xfa\x85\xc9\x37\x13\x6a\x6d\x7d\x9e\x99\x69\xeb\x13\xfa\x6c\x1f\x01\x00\x00\xff\xff\xa0\xc7\x8c\xd5\x52\x03\x00\x00")

func templatesFilesJobYmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesFilesJobYml,
		"templates/files/job.yml",
	)
}

func templatesFilesJobYml() (*asset, error) {
	bytes, err := templatesFilesJobYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/files/job.yml", size: 850, mode: os.FileMode(420), modTime: time.Unix(1485150089, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesFilesPersistentvolumeclaimYml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x34\x8d\xb1\x6e\xc3\x30\x0c\x44\x77\x7d\xc5\xfd\x40\x5c\x74\xd5\xda\xa1\x53\xd1\xa2\x43\x3a\x18\x41\xc0\xc8\x87\x42\x88\x4d\xba\x22\xed\xef\x2f\x1c\x28\x13\x8f\xe0\xe3\xbb\x7b\xd5\x29\xe3\x8b\xcd\xab\x07\x35\xce\x36\x6f\x0b\xdf\x66\xa9\x4b\x92\xb5\x9e\x8f\x83\x69\xc6\xfe\x9a\x16\x86\x4c\x12\x92\x13\xa0\xb2\x30\x63\x5c\xf7\x72\x3d\xe2\x25\x01\xa2\x6a\x21\x51\x4d\xfd\x20\x80\xfd\xa1\x1a\x6e\x0c\x19\xee\xdb\x8d\x4d\x19\xf4\xa1\xda\x8b\x87\x35\xf9\xe5\xa9\xcc\xe2\x9e\x31\x3e\x66\x17\xf9\xca\x72\xfc\x4b\x29\x74\xff\xb0\x89\x5d\x77\xc2\x37\x65\xfa\x69\x35\xf8\xa9\x85\x09\x68\x74\xdb\x5a\x79\x02\x8d\x7f\x1b\x3d\xfa\x06\xf4\x96\x8c\xb1\xa7\xeb\x7b\xbd\xa4\xff\x00\x00\x00\xff\xff\x65\x90\xbc\xca\xf1\x00\x00\x00")

func templatesFilesPersistentvolumeclaimYmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesFilesPersistentvolumeclaimYml,
		"templates/files/persistentvolumeclaim.yml",
	)
}

func templatesFilesPersistentvolumeclaimYml() (*asset, error) {
	bytes, err := templatesFilesPersistentvolumeclaimYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/files/persistentvolumeclaim.yml", size: 241, mode: os.FileMode(420), modTime: time.Unix(1485150226, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesFilesPodYml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x94\x92\xcf\x6e\xa3\x30\x10\xc6\xef\x3c\xc5\xbc\xc0\x1e\xf6\xea\x1b\x4a\xb2\x7b\x68\xa1\x28\x51\xb9\x20\x14\x8d\xec\x09\xb1\xe2\x3f\x08\x1b\x2a\xde\xbe\x32\x38\xd4\xf4\x50\xa9\x73\x9a\x99\xdf\xf8\xcb\x37\x13\xb0\x97\x35\x0d\x4e\x5a\xc3\x60\xfa\x9b\x3d\xa4\x11\x0c\x2a\x2b\x32\x4d\x1e\x05\x7a\x64\x19\x80\x41\x4d\x0c\x9a\xde\x8a\x6b\x48\xdb\xcc\xf5\xc4\x03\x18\xc8\x79\x1c\x7c\x65\x95\xe4\x33\x83\x5c\x7d\xe0\xec\x32\x00\xe4\x5e\x4e\x74\x24\x14\x4a\x1a\xba\x10\xb7\x46\x38\x06\x0d\x0a\xd7\x66\x00\x52\x63\x47\xd5\xa8\xd4\x85\xf8\x40\xde\x05\x29\x80\x3f\xd0\xb8\xa5\x0e\x23\xdc\x1a\x8f\xd2\xd0\xb0\xc1\x68\x62\x03\xd1\x0a\x2c\xb1\x28\xee\xe8\xd2\x79\x62\x1c\xba\xa8\xb3\x6a\xe5\xe7\xff\x97\x58\x72\xab\x35\x1a\x91\xd2\xc3\x5b\x51\xe4\xe5\x31\x76\xc8\x4c\x29\x8c\x36\x4e\x65\x7d\x2d\xf3\xe2\xd4\x6e\x08\x60\x42\x35\xd2\xbf\xc1\x6a\x96\x34\x97\x55\x6e\xb2\x2b\xb0\x7f\xa1\xf9\x4c\xb7\x3d\x84\x64\xaf\x9b\xec\x76\x4b\x3d\xe3\x41\xf3\xd7\xc0\x83\xe6\xf6\x17\x76\x22\xab\xf3\xd7\xf7\x0d\x4e\x56\x8d\x9a\x0a\x3b\x1a\xbf\xbb\x8a\x0e\x9d\x0a\xfd\x9d\x41\xb3\xe4\xd7\x1e\xfd\x3d\x95\x8c\xbf\xb6\xc2\xa7\xd5\x55\xee\xfb\xff\xb4\x9f\x09\xd1\x87\xef\xcc\x79\x32\xbe\x5e\x5e\x1c\x14\xca\xe4\x54\x3c\x94\x65\x3c\x46\xc8\x93\xc7\x3f\xa8\xde\xad\x5b\x3d\x6f\x42\xfd\xba\xc1\xea\xfd\x33\x00\x00\xff\xff\xfa\xed\x28\xcc\xe0\x02\x00\x00")

func templatesFilesPodYmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesFilesPodYml,
		"templates/files/pod.yml",
	)
}

func templatesFilesPodYml() (*asset, error) {
	bytes, err := templatesFilesPodYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/files/pod.yml", size: 736, mode: os.FileMode(420), modTime: time.Unix(1485149989, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesFilesProjectYml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x54\x90\x41\x6e\x83\x30\x10\x45\xf7\x3e\xc5\xac\x2b\x85\x2a\x5b\x5f\x05\x21\x6b\x82\x87\x64\x5a\x63\xa3\xb1\x4d\xd2\x9e\xbe\x82\xd8\xd4\xec\xfe\x7f\x4f\xdf\x1a\x90\x10\x92\x99\x82\xb3\x24\x1a\x3a\xe5\x71\xa6\xb8\xe0\x48\x1a\xfa\x23\x0f\x8a\x3d\x27\x93\x17\xad\x00\x2e\xd0\x6f\x2d\x2f\x85\xda\xf0\xf4\x0d\xdf\xfb\xa0\x26\xf6\xe8\xf8\x97\xfe\x47\x0d\x69\x74\xb3\x3e\xb1\x41\xd1\x6b\x74\xd9\x52\x2c\xb6\xd6\x41\x09\xc5\x90\x65\xac\xe6\xa8\x9f\x1f\xdd\xcf\xec\x54\x24\x59\xf9\xb0\xb5\x15\xf9\x15\x6e\x45\x6c\xa9\xc0\x15\x85\xf1\xe6\xde\x13\x80\x15\xe5\xaa\x61\x45\x97\xe9\xaa\x6e\x99\x9d\x7d\xf3\x0b\x6c\x3f\x44\x43\xcf\x33\xde\xc9\x6c\x65\xd8\x05\x40\xc2\xfb\xc1\x13\xde\x2b\x9e\x24\xcc\x1a\xfa\xfd\x0d\x63\x59\x2a\x5f\x51\x4c\x79\xab\xc6\xaa\x96\x1c\x1f\x1a\x26\x74\x91\x1a\x62\x1c\x26\x8a\xe9\x2c\x30\xa7\x60\x46\x47\xe8\x2b\x1f\x85\x2c\xf9\xc4\xe8\xca\x47\x3e\xc2\x36\x62\x6f\xe9\xd5\xd9\x30\x7e\x93\x74\x1c\xf6\x79\x8e\x24\xe5\x84\x1a\xdf\x27\x2c\x18\xe3\x33\x88\xd5\xd0\xd7\x78\x16\x66\x62\x47\x8d\xdd\xfb\xa0\xfe\x02\x00\x00\xff\xff\x79\x3d\x85\xf7\x48\x02\x00\x00")

func templatesFilesProjectYmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesFilesProjectYml,
		"templates/files/project.yml",
	)
}

func templatesFilesProjectYml() (*asset, error) {
	bytes, err := templatesFilesProjectYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/files/project.yml", size: 584, mode: os.FileMode(420), modTime: time.Unix(1485150792, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesFilesServiceYml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x6c\x8e\x41\x0a\xc2\x40\x0c\x45\xf7\x73\x8a\x5c\xc0\x85\xdb\x6c\xbd\x40\x41\x71\x53\x8a\x84\xe9\x47\x06\xdb\x66\x48\x42\xcf\x2f\xd3\x11\x41\x70\x95\xfc\xf7\x79\x21\x52\xcb\x1d\xe6\x45\x37\xa6\xfd\x9c\x5e\x65\x9b\x99\xae\xb0\xbd\x64\xa4\x15\x21\xb3\x84\x70\x22\xda\x64\x05\xd3\xe8\xbd\x7a\xb4\x38\x25\xaf\xc8\xad\xac\x6a\xe1\x6d\x21\x3a\x1d\x81\x69\x6c\x63\x3a\xd0\x57\xee\x52\x47\xd5\x34\x34\xeb\xc2\x74\xbb\x0c\x1f\x16\x62\x4f\xc4\xf0\xeb\x3b\x16\xe4\x50\xeb\xe7\xff\xbe\xf1\x0e\x00\x00\xff\xff\x7c\x49\xca\x57\xc5\x00\x00\x00")

func templatesFilesServiceYmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesFilesServiceYml,
		"templates/files/service.yml",
	)
}

func templatesFilesServiceYml() (*asset, error) {
	bytes, err := templatesFilesServiceYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/files/service.yml", size: 197, mode: os.FileMode(420), modTime: time.Unix(1485149110, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/files/configmap.yml": templatesFilesConfigmapYml,
	"templates/files/deployment.yml": templatesFilesDeploymentYml,
	"templates/files/job.yml": templatesFilesJobYml,
	"templates/files/persistentvolumeclaim.yml": templatesFilesPersistentvolumeclaimYml,
	"templates/files/pod.yml": templatesFilesPodYml,
	"templates/files/project.yml": templatesFilesProjectYml,
	"templates/files/service.yml": templatesFilesServiceYml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"files": &bintree{nil, map[string]*bintree{
			"configmap.yml": &bintree{templatesFilesConfigmapYml, map[string]*bintree{}},
			"deployment.yml": &bintree{templatesFilesDeploymentYml, map[string]*bintree{}},
			"job.yml": &bintree{templatesFilesJobYml, map[string]*bintree{}},
			"persistentvolumeclaim.yml": &bintree{templatesFilesPersistentvolumeclaimYml, map[string]*bintree{}},
			"pod.yml": &bintree{templatesFilesPodYml, map[string]*bintree{}},
			"project.yml": &bintree{templatesFilesProjectYml, map[string]*bintree{}},
			"service.yml": &bintree{templatesFilesServiceYml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

